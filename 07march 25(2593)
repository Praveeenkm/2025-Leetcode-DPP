class Solution:
    def closestPrimes(self, left: int, right: int):
        # Step 1: Use the Sieve of Eratosthenes to find primes up to 10^6
        LIMIT = 10**6
        is_prime = [True] * (LIMIT + 1)
        is_prime[0] = is_prime[1] = False  # 0 and 1 are not primes

        for num in range(2, int(LIMIT**0.5) + 1):
            if is_prime[num]:
                for multiple in range(num * num, LIMIT + 1, num):
                    is_prime[multiple] = False

        # Step 2: Extract primes in the given range
        primes = [num for num in range(left, right + 1) if is_prime[num]]

        # Step 3: Find the closest prime pair
        if len(primes) < 2:
            return [-1, -1]

        min_diff = float('inf')
        result = [-1, -1]

        for i in range(len(primes) - 1):
            diff = primes[i + 1] - primes[i]
            if diff < min_diff:
                min_diff = diff
                result = [primes[i], primes[i + 1]]

        return result

# Example test cases
solution = Solution()
print(solution.closestPrimes(10, 19))  # Output: [11, 13]
print(solution.closestPrimes(4, 6))    # Output: [-1, -1]
